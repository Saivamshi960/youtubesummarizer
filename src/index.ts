// import dotenv from 'dotenv';
// import path from 'path';
// import fs from 'fs';
// import { extractTranscript } from './youtubeTranscript';
// import { generateSummary } from './summarize';

// // Load environment variables
// dotenv.config();

// // YouTube URL to process
// const youtubeUrl = "https://youtu.be/b-Pn0yXL9y8?si=yp-iUckdJ3AczOJf";

// interface VideoMetadata {
//   title: string;
//   author: string | undefined;
//   duration?: number | undefined;
//   url: string;
//   videoId: string;
// }

// interface ProcessingResult {
//   videoMetadata: VideoMetadata;
//   transcript: string;
//   summary: string | null;
//   method: string;
//   confidence?: number | undefined;
//   wordCount: number;
//   processingTime: number;
//   timestamp: string;
// }

// /**
//  * Extracts the video ID from a YouTube URL.
//  * @param url The full URL of the YouTube video.
//  * @returns The video ID string or null if not found.
//  */
// function extractVideoId(url: string): string | null {
//   const patterns = [
//     /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
//     /youtube\.com\/v\/([^&\n?#]+)/
//   ];
  
//   for (const pattern of patterns) {
//     const match = url.match(pattern);
//     if (match) return match[1] ?? null;
//   }
  
//   return null;
// }

// /**
//  * Creates the output directories if they don't exist.
//  */
// function createOutputDirectories() {
//   const dirs = [
//     'outputs',
//     'outputs/transcripts',
//     'outputs/summaries', 
//     'outputs/reports',
//     'outputs/samples',
//     'transcripts'
//   ];
  
//   dirs.forEach(dir => {
//     if (!fs.existsSync(dir)) {
//       fs.mkdirSync(dir, { recursive: true });
//     }
//   });
// }

// /**
//  * Sanitizes a string for use as a filename.
//  * @param filename The original filename.
//  * @returns The sanitized filename.
//  */
// function sanitizeFilename(filename: string): string {
//   return filename
//     .replace(/[<>:"/\\|?*]/g, '-')
//     .replace(/\s+/g, '_')
//     .substring(0, 100);
// }

// /**
//  * Saves the processing results to files.
//  * @param result The ProcessingResult object.
//  */
// async function saveResults(result: ProcessingResult): Promise<void> {
//   const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
//   const safeTitle = sanitizeFilename(result.videoMetadata.title);
  
//   // Save raw transcript
//   const transcriptPath = `outputs/transcripts/${safeTitle}_${timestamp}.txt`;
//   fs.writeFileSync(transcriptPath, result.transcript, 'utf8');
  
//   // Save summary
//   if (result.summary) {
//     const summaryPath = `outputs/summaries/${safeTitle}_summary_${timestamp}.md`;
//     fs.writeFileSync(summaryPath, result.summary, 'utf8');
//   }
  
//   // Save complete report
//   const reportContent = `# YouTube Video Summary Report

// ## Video Information
// - **Title**: ${result.videoMetadata.title}
// - **Author**: ${result.videoMetadata.author || 'Unknown'}
// - **Duration**: ${result.videoMetadata.duration ? Math.floor(result.videoMetadata.duration / 60) + ':' + (result.videoMetadata.duration % 60).toString().padStart(2, '0') : 'Unknown'}
// - **URL**: ${result.videoMetadata.url}
// - **Video ID**: ${result.videoMetadata.videoId}

// ## Processing Information
// - **Method Used**: ${result.method}
// - **Processing Time**: ${result.processingTime}ms
// - **Word Count**: ${result.wordCount}
// - **Confidence**: ${result.confidence ? (result.confidence * 100).toFixed(1) + '%' : 'N/A'}
// - **Processed At**: ${result.timestamp}

// ---

// ## Summary

// ${result.summary || 'No summary generated'}

// ---

// ## Full Transcript

// ${result.transcript}

// ---

// *Generated by YouTube Video Summarizer*
// `;
  
//   const reportPath = `outputs/reports/${safeTitle}_report_${timestamp}.md`;
//   fs.writeFileSync(reportPath, reportContent, 'utf8');
  
//   console.log(`\n📁 Files saved:`);
//   console.log(`   📄 Transcript: ${transcriptPath}`);
//   if (result.summary) {
//     console.log(`   📋 Summary: outputs/summaries/${safeTitle}_summary_${timestamp}.md`);
//   }
//   console.log(`   📊 Report: ${reportPath}`);
// }

// /**
//  * Displays the processing results to the console.
//  * @param result The ProcessingResult object.
//  */
// function displayResults(result: ProcessingResult) {
//   console.log('\n' + '='.repeat(80));
//   console.log('🎉 PROCESSING RESULTS');
//   console.log('='.repeat(80));
  
//   console.log(`🎵 Video: ${result.videoMetadata.title}`);
//   console.log(`📺 Channel: ${result.videoMetadata.author || 'Unknown'}`);
//   if (result.videoMetadata.duration) {
//     console.log(`⏱️ Duration: ${Math.floor(result.videoMetadata.duration / 60)}:${(result.videoMetadata.duration % 60).toString().padStart(2, '0')}`);
//   }
//   console.log(`📝 Word Count: ${result.wordCount}`);
//   console.log(`🔧 Method: ${result.method}`);
//   console.log(`⚡ Processing Time: ${result.processingTime}ms`);
//   if (result.confidence) {
//     console.log(`🎯 Confidence: ${(result.confidence * 100).toFixed(1)}%`);
//   }

//   // Show transcript preview
//   console.log('\n📄 TRANSCRIPT PREVIEW:');
//   console.log('-'.repeat(60));
//   const transcriptPreview = result.transcript.substring(0, 500);
//   console.log(transcriptPreview + (result.transcript.length > 500 ? '...' : ''));
  
//   // Show summary
//   if (result.summary) {
//     console.log('\n🤖 AI SUMMARY:');
//     console.log('-'.repeat(60));
//     console.log(result.summary);
//   }
  
//   console.log('\n' + '='.repeat(80));
// }

// async function main() {
//   try {
//     console.log('🎥 YouTube Video Summarizer');
//     console.log('='.repeat(40));
    
//     // Validate environment for required API keys
//     if (!process.env.GEMINI_API_KEY) {
//       console.error('❌ GEMINI_API_KEY is required in .env file');
//       console.error('💡 Get your API key from: https://makersuite.google.com/app/apikey');
//       process.exit(1);
//     }
//     if (!process.env.DEEPGRAM_API_KEY) {
//       console.error('❌ DEEPGRAM_API_KEY is required in .env file');
//       console.error('💡 Get your API key from: https://deepgram.com/');
//       process.exit(1);
//     }
    
//     console.log('✅ Environment validated');
//     console.log(`🔑 Gemini API Key: ****${process.env.GEMINI_API_KEY.slice(-4)}`);
//     console.log(`🔑 Deepgram API Key: ****${process.env.DEEPGRAM_API_KEY.slice(-4)}`);

//     // Create output directories
//     createOutputDirectories();
//     console.log('📁 Output directories created');
    
//     // Extract video ID
//     const videoId = extractVideoId(youtubeUrl);
//     if (!videoId) {
//       console.error('❌ Invalid YouTube URL format');
//       process.exit(1);
//     }
    
//     console.log(`🎬 Processing video: ${videoId}`);
//     console.log(`🔗 URL: ${youtubeUrl}`);
    
//     const startTime = Date.now();
    
//     // Step 1: Extract transcript
//     console.log('\n📄 Extracting transcript...');
//     const transcriptResult = await extractTranscript(youtubeUrl, videoId);
    
//     if (!transcriptResult.transcript) {
//       console.error('❌ Failed to extract transcript');
//       process.exit(1);
//     }
    
//     console.log(`✅ Transcript extracted using: ${transcriptResult.method}`);
//     const wordCount = transcriptResult.transcript.split(/\s+/).filter(word => word.length > 0).length;
//     console.log(`📝 Word count: ${wordCount}`);
    
//     // Step 2: Generate summary
//     console.log('\n🤖 Generating AI summary...');
//     const summary = await generateSummary(transcriptResult.transcript, {
//       title: transcriptResult.metadata?.title || 'Unknown Video',
//       author: transcriptResult.metadata?.author || 'Unknown'
//     });
    
//     if (summary) {
//       console.log('✅ Summary generated successfully');
//     } else {
//       console.log('⚠️ Summary generation failed or skipped');
//     }
    
//     const processingTime = Date.now() - startTime;
    
//     // Prepare results
//     const result: ProcessingResult = {
//       videoMetadata: {
//         title: transcriptResult.metadata?.title || 'Unknown Video',
//         author: transcriptResult.metadata?.author,
//         duration: transcriptResult.metadata?.duration,
//         url: youtubeUrl,
//         videoId: videoId
//       },
//       transcript: transcriptResult.transcript,
//       summary: summary,
//       method: transcriptResult.method,
//       confidence: transcriptResult.confidence,
//       wordCount: wordCount,
//       processingTime: processingTime,
//       timestamp: new Date().toISOString()
//     };
    
//     // Save and display results
//     await saveResults(result);
//     displayResults(result);
    
//     console.log('\n🎉 Processing completed successfully!');
//     console.log(`⏱️ Total time: ${processingTime}ms`);
    
//   } catch (error) {
//     console.error('❌ Error in main process:', error);
    
//     console.log('\n🔧 TROUBLESHOOTING TIPS:');
//     console.log('1. Check your internet connection');
//     console.log('2. Verify API keys in .env file');
//     console.log('3. Try a different YouTube video');
//     console.log('4. Check if video has captions available');
//     console.log('5. Ensure all dependencies are installed (`npm install`)');
    
//     process.exit(1);
//   }
// }

// // Handle graceful shutdown
// process.on('SIGINT', () => {
//   console.log('\n👋 Gracefully shutting down...');
//   process.exit(0);
// });

// // Run the main function
// main();




import dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';
import { extractTranscript } from './youtubeTranscript';
import { generateSummary } from './summarize';

// Load environment variables
dotenv.config();

// YouTube URL to process
const youtubeUrl = "https://youtu.be/7UND2UIF4IE?si=DKnLKl8HXveTYWK4";

interface VideoMetadata {
  title: string;
  author: string | undefined;
  duration?: number | undefined;
  url: string;
  videoId: string;
}

interface ProcessingResult {
  videoMetadata: VideoMetadata;
  transcript: string;
  summary: string | null;
  speakers: string[] | undefined; // speakers is required but can be undefined
  method: string;
  confidence?: number | undefined;
  wordCount: number;
  processingTime: number;
  timestamp: string;
}

/**
 * Extracts the video ID from a YouTube URL.
 * @param url The full URL of the YouTube video.
 * @returns The video ID string or null if not found.
 */
function extractVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&\n?#]+)/,
    /youtube\.com\/v\/([^&\n?#]+)/
  ];
  
  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match) return match[1] ?? null;
  }
  
  return null;
}

/**
 * Creates the output directories if they don't exist.
 */
function createOutputDirectories() {
  const dirs = [
    'outputs',
    'outputs/transcripts',
    'outputs/summaries', 
    'outputs/reports',
    'outputs/samples',
    'transcripts'
  ];
  
  dirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
  });
}

/**
 * Sanitizes a string for use as a filename.
 * @param filename The original filename.
 * @returns The sanitized filename.
 */
function sanitizeFilename(filename: string): string {
  return filename
    .replace(/[<>:"/\\|?*]/g, '-')
    .replace(/\s+/g, '_')
    .substring(0, 100);
}

/**
 * Saves the processing results to files.
 * @param result The ProcessingResult object.
 */
async function saveResults(result: ProcessingResult): Promise<void> {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const safeTitle = sanitizeFilename(result.videoMetadata.title);
  
  // Save raw transcript
  const transcriptPath = `outputs/transcripts/${safeTitle}_${timestamp}.txt`;
  fs.writeFileSync(transcriptPath, result.transcript, 'utf8');
  
  // Save summary
  if (result.summary) {
    const summaryPath = `outputs/summaries/${safeTitle}_summary_${timestamp}.md`;
    fs.writeFileSync(summaryPath, result.summary, 'utf8');
  }
  
  // Save complete report
  const reportContent = `# YouTube Video Summary Report

## Video Information
- **Title**: ${result.videoMetadata.title}
- **Author**: ${result.videoMetadata.author || 'Unknown'}
- **Duration**: ${result.videoMetadata.duration ? Math.floor(result.videoMetadata.duration / 60) + ':' + (result.videoMetadata.duration % 60).toString().padStart(2, '0') : 'Unknown'}
- **URL**: ${result.videoMetadata.url}
- **Video ID**: ${result.videoMetadata.videoId}
- **Speakers Detected**: ${result.speakers?.length ? result.speakers.join(', ') : 'N/A'}

## Processing Information
- **Method Used**: ${result.method}
- **Processing Time**: ${result.processingTime}ms
- **Word Count**: ${result.wordCount}
- **Confidence**: ${result.confidence ? (result.confidence * 100).toFixed(1) + '%' : 'N/A'}
- **Processed At**: ${result.timestamp}

---

## Summary

${result.summary || 'No summary generated'}

---

## Full Transcript

${result.transcript}

---

*Generated by YouTube Video Summarizer*
`;
  
  const reportPath = `outputs/reports/${safeTitle}_report_${timestamp}.md`;
  fs.writeFileSync(reportPath, reportContent, 'utf8');
  
  console.log(`\n📁 Files saved:`);
  console.log(`   📄 Transcript: ${transcriptPath}`);
  if (result.summary) {
    console.log(`   📋 Summary: outputs/summaries/${safeTitle}_summary_${timestamp}.md`);
  }
  console.log(`   📊 Report: ${reportPath}`);
}

/**
 * Displays the processing results to the console.
 * @param result The ProcessingResult object.
 */
function displayResults(result: ProcessingResult) {
  console.log('\n' + '='.repeat(80));
  console.log('🎉 PROCESSING RESULTS');
  console.log('='.repeat(80));
  
  console.log(`🎵 Video: ${result.videoMetadata.title}`);
  console.log(`📺 Channel: ${result.videoMetadata.author || 'Unknown'}`);
  if (result.videoMetadata.duration) {
    console.log(`⏱️ Duration: ${Math.floor(result.videoMetadata.duration / 60)}:${(result.videoMetadata.duration % 60).toString().padStart(2, '0')}`);
  }
  console.log(`📝 Word Count: ${result.wordCount}`);
  console.log(`🔧 Method: ${result.method}`);
  console.log(`⚡ Processing Time: ${result.processingTime}ms`);
  if (result.confidence) {
    console.log(`🎯 Confidence: ${(result.confidence * 100).toFixed(1)}%`);
  }
  if (result.speakers?.length) {
    console.log(`🗣️ Speakers Detected: ${result.speakers.join(', ')}`);
  }

  // Show transcript preview
  console.log('\n📄 TRANSCRIPT PREVIEW:');
  console.log('-'.repeat(60));
  const transcriptPreview = result.transcript.substring(0, 500);
  console.log(transcriptPreview + (result.transcript.length > 500 ? '...' : ''));
  
  // Show summary
  if (result.summary) {
    console.log('\n🤖 AI SUMMARY:');
    console.log('-'.repeat(60));
    console.log(result.summary);
  }
  
  console.log('\n' + '='.repeat(80));
}

async function main() {
  try {
    console.log('🎥 YouTube Video Summarizer');
    console.log('='.repeat(40));
    
    // Validate environment for required API keys
    if (!process.env.GEMINI_API_KEY) {
      console.error('❌ GEMINI_API_KEY is required in .env file');
      console.error('💡 Get your API key from: https://makersuite.google.com/app/apikey');
      process.exit(1);
    }
    if (!process.env.DEEPGRAM_API_KEY) {
      console.error('❌ DEEPGRAM_API_KEY is required in .env file');
      console.error('💡 Get your API key from: https://deepgram.com/');
      process.exit(1);
    }
    
    console.log('✅ Environment validated');
    console.log(`🔑 Gemini API Key: ****${process.env.GEMINI_API_KEY.slice(-4)}`);
    console.log(`🔑 Deepgram API Key: ****${process.env.DEEPGRAM_API_KEY.slice(-4)}`);

    // Create output directories
    createOutputDirectories();
    console.log('📁 Output directories created');
    
    // Extract video ID
    const videoId = extractVideoId(youtubeUrl);
    if (!videoId) {
      console.error('❌ Invalid YouTube URL format');
      process.exit(1);
    }
    
    console.log(`🎬 Processing video: ${videoId}`);
    console.log(`🔗 URL: ${youtubeUrl}`);
    
    const startTime = Date.now();
    
    // Step 1: Extract transcript
    console.log('\n📄 Extracting transcript...');
    const transcriptResult = await extractTranscript(youtubeUrl, videoId);
    
    if (!transcriptResult.transcript) {
      console.error('❌ Failed to extract transcript');
      process.exit(1);
    }
    
    console.log(`✅ Transcript extracted using: ${transcriptResult.method}`);
    const wordCount = transcriptResult.transcript.split(/\s+/).filter(word => word.length > 0).length;
    console.log(`📝 Word count: ${wordCount}`);
    
    // Step 2: Generate summary with Gemini API
    console.log('\n🤖 Generating AI summary with Gemini...');
    const summary = await generateSummary(transcriptResult.transcript, {
      title: transcriptResult.metadata?.title || 'Unknown Video',
      author: transcriptResult.metadata?.author || 'Unknown'
    });
    
    if (summary) {
      console.log('✅ Summary generated successfully');
    } else {
      console.log('⚠️ Summary generation failed or skipped');
    }
    
    const processingTime = Date.now() - startTime;
    
    // Prepare results
    const result: ProcessingResult = {
      videoMetadata: {
        title: transcriptResult.metadata?.title || 'Unknown Video',
        author: transcriptResult.metadata?.author,
        duration: transcriptResult.metadata?.duration,
        url: youtubeUrl,
        videoId: videoId
      },
      transcript: transcriptResult.transcript,
      summary: summary,
      speakers: transcriptResult.speakers,
      method: transcriptResult.method,
      confidence: transcriptResult.confidence,
      wordCount: wordCount,
      processingTime: processingTime,
      timestamp: new Date().toISOString()
    };
    
    // Save and display results
    await saveResults(result);
    displayResults(result);
    
    console.log('\n🎉 Processing completed successfully!');
    console.log(`⏱️ Total time: ${processingTime}ms`);
    
  } catch (error) {
    console.error('❌ Error in main process:', error);
    
    console.log('\n🔧 TROUBLESHOOTING TIPS:');
    console.log('1. Check your internet connection');
    console.log('2. Verify API keys in .env file');
    console.log('3. Try a different YouTube video');
    console.log('4. Check if video has captions available');
    console.log('5. Ensure all dependencies are installed (`npm install @distube/ytdl-core`)');
    
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('\n👋 Gracefully shutting down...');
  process.exit(0);
});

// Run the main function
main();
